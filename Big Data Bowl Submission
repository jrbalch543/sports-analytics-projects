{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "11bb4e28",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "papermill": {
     "duration": 0.003084,
     "end_time": "2023-01-07T11:53:52.451737",
     "exception": false,
     "start_time": "2023-01-07T11:53:52.448653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdcf32b1",
   "metadata": {
    "papermill": {
     "duration": 0.00178,
     "end_time": "2023-01-07T11:53:52.455577",
     "exception": false,
     "start_time": "2023-01-07T11:53:52.453797",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7dac0a56",
   "metadata": {
    "papermill": {
     "duration": 0.001668,
     "end_time": "2023-01-07T11:53:52.459058",
     "exception": false,
     "start_time": "2023-01-07T11:53:52.457390",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "title: \"BDB RMD\"\n",
    "author: \"Jackson Balch\"\n",
    "date: \"`r Sys.Date()`\"\n",
    "output: html_document\n",
    "---\n",
    "\n",
    "```{r setup, include=FALSE}\n",
    "knitr::opts_chunk$set(echo = TRUE)\n",
    "library(readxl)\n",
    "library(dplyr)\n",
    "library(ggplot2)\n",
    "library(gganimate)\n",
    "library(png)\n",
    "library(gifski)\n",
    "library(knitr)\n",
    "```\n",
    "\n",
    "## Big Data Bowl 2023\n",
    "## YLAE: A Better Way to Measure Lineman Performance on Pass Plays\n",
    "\n",
    "Growing up, I was always a bigger kid. From about first grade on to high school, I was the biggest kid in my class by at least 20-30 pounds. There aren't a whole lot of opportunities or situations where that's particularly useful or fun at all, but one where it is at least semi-appreciated is the game of football. When I finally made it to the fall of my third grade year, I joined and played my first snaps of PeeWee Football. I dreamed of scoring touchdowns or being the star RB, but alas, the weight limit came into effect. I was over the threshold required to be a \"skill\" position, so I became a lineman.  \n",
    "\n",
    "It was never glorious, but I took it seriously. I learned and practiced my steps and footwork, and by the time I made it to high school, I felt like I was pretty good. I made the all-state team in New Hampshire where we played, and had felt like one of the best players on my team. As a high school freshman, I was named to the Varsity team as a backup/rotational guy on the line, despite now being one of the now smaller guys on the o-line. Where I had once had the size advantage, I stayed constant in weight and size from eighth grade on while others became behemoths lined up against me. I'm about 5' 10\", 215lbs on a good day, and one of my teammates was now 6' 4\", 360lbs. Being named to the Varsity team as a freshman was rare for any position, but especially for a now small lineman like me. What I took pride in was my technique. I did a great job of having great run-blocking footwork and having a tight and low center of balance and mass. While I didn't blow opposing players off the ball typically, I did create lanes and never gave up yards. Where some of my teammates would have the occasional pancake or get blown up going for one, I played consistent, foundationally-strong football that just resulted in solid blocking that rarely lost his battle. I ended my high school career as a two-time all-state offensive lineman for this reason, and got the opportunity to be named to the Vermont senior all-star team.  \n",
    "\n",
    "Point being here that all my life now, I've been a lineman. I've watched linemen play again and again, and have been able to formulate my own opinions about what makes a good block. However, how do we evaluate that statistically? There are no widely used statistics to evaluate linemen besides the few PFF put out, but those are either a number we as the general public don't get to understand how it works, or pretty binary stats that tell me if a lineman was beat by his assignment. What if there was a way to consistently evaluate the lineman though? On pass plays, every lineman gives up ground, but how much should they?  \n",
    "\n",
    "In this project, I am going to calculate and find the average distance a lineman is away from their QB based on frameID (0.1 second intervals), position (Tackle, Guard, Center), and formation (i.e. Shotgun, Singleback, etc.). I will then use this to calculate how far away from the average each player is at each particular frameId, and create the YLAE metric (Yards Lost Above Expected). This will essentially tell me how much farther back the lineman is pushed to the QB than expected on average.  \n",
    "\n",
    "## Data Load\n",
    "First, I needed to load all my files. These were given as a part of the Big Data Bowl, and converted to XLSX files in Excel. \n",
    "```{r DataLoad, warning=FALSE}\n",
    "players <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/playersXLSX.xlsx\")\n",
    "week1 <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/week1XLSX.xlsx\")\n",
    "week2 <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/week2XLSX.xlsx\")\n",
    "week3 <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/week3XLSX.xlsx\")\n",
    "week4 <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/week4XLSX.xlsx\")\n",
    "week5 <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/week5XLSX.xlsx\")\n",
    "week6 <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/week6XLSX.xlsx\")\n",
    "week7 <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/week7XLSX.xlsx\")\n",
    "week8 <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/week8XLSX.xlsx\")\n",
    "plays <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/playsXLSX.xlsx\")\n",
    "pff <- read_excel(\"C:/Users/jrbal/Downloads/Big Data Bowl/pffXLSX.xlsx\")\n",
    "```\n",
    "\n",
    "Next, I want to create a dataframe with the data from all weeks included, but R Studio has some oddities in reading each dataframe. I need to do some data manipulation to ensure that all columns are able to match type in order to bind them together. For some reason, the types of some columns were numbers yet not converted to numeric values in the read_excel statement.\n",
    "\n",
    "```{r allWeeks, warning=FALSE}\n",
    "allweeks <- bind_rows(week1, week2, week3)\n",
    "allweeks$nflId <- as.numeric(allweeks$nflId)\n",
    "allweeks$jerseyNumber <- as.numeric(allweeks$jerseyNumber)\n",
    "allweeks$o <- as.numeric(allweeks$o)\n",
    "allweeks$dir <- as.numeric(allweeks$dir)\n",
    "week6$nflId <- as.numeric(week6$nflId)\n",
    "week6$jerseyNumber <- as.numeric(week6$jerseyNumber)\n",
    "week6$o <- as.numeric(week6$o)\n",
    "week6$dir <- as.numeric(week6$dir)\n",
    "week7$nflId <- as.numeric(week7$nflId)\n",
    "week7$jerseyNumber <- as.numeric(week7$jerseyNumber)\n",
    "week7$o <- as.numeric(week7$o)\n",
    "week7$dir <- as.numeric(week7$dir)\n",
    "allweeks <- bind_rows(allweeks, week4, week5, week6, week7, week8)\n",
    "```\n",
    "\n",
    "Now, I have data with all plays from all weeks in as one file so that I am able to run my eventual processes for each week and the season so far as a whole.\n",
    "\n",
    "## Position-ing\n",
    "Next up, I want to only take the data from players on the O-Line and QB. While it may be fun to analyze blocking tight ends or running backs, the focus of this is only to evaluate linemen. I run a series of filter statements to create new data frames of players on the line or at QB. \n",
    "```{r Position Grouping}\n",
    "olinePos <- c(\"T\", \"C\", \"G\")\n",
    "dlinePos <- c(\"DE\", \"NT\", \"DT\")\n",
    "\n",
    "opos <- c(olinePos, \"QB\")\n",
    "\n",
    "linePos <- c(olinePos, dlinePos)\n",
    "\n",
    "oline <- players %>%\n",
    "  filter(officialPosition %in% olinePos)\n",
    "```\n",
    "\n",
    "Here's the first error I encounter: Taysom Hill is officially listed as a QB, yet plays plenty of tight end or running back as well. This results in him being involved as a \"QB\" in the play later on, yet lined up as a wide reciever. It throws my distances into a huge series of errors, so I chose to remove him all-together.\n",
    "\n",
    "```{r Taysom Hill}\n",
    "qbs <- players %>%\n",
    "  filter(officialPosition == \"QB\", nflId != 45244)\n",
    "## Removed Taysom Hill\n",
    "```\n",
    "\n",
    "Now, I select a series with both O-Line and QB in one.\n",
    "\n",
    "```{r opos}\n",
    "oplayers <- players %>%\n",
    "  filter(officialPosition %in% opos)\n",
    "```\n",
    "\n",
    "## Test with One Play\n",
    "I want to eventually turn this into a single function to do this all for any week, but I start small by doing it for one play. I take the first play of week 1, play 97, and start to work with it.\n",
    "```{r One Play Test}\n",
    "testPLay <- week1 %>%\n",
    "  filter(playId == 97)\n",
    "```\n",
    "\n",
    "I want to pull QB and O-Line info from this play, so I use the data frames I made earlier of QBs and O-Line to select only the info for those specific positions for the play:\n",
    "\n",
    "```{r OPT select players}\n",
    "qbInfo <- testPLay %>%\n",
    "  filter(nflId %in% qbs$nflId)\n",
    "\n",
    "olineInfo <- testPLay %>%\n",
    "  filter(nflId %in% oline$nflId)\n",
    "```\n",
    "\n",
    "Now, I'll join the two datasets I just made in order to have the QB info at each frameID in the same row as the info for each lineman.\n",
    "\n",
    "```{r OPT Join}\n",
    "test_join <- inner_join(olineInfo, qbInfo, by = \"frameId\", suffix = c(\".oline\", \".qb\"))\n",
    "```\n",
    "\n",
    "I define a function to create my distFromQB variable, which calculates the distance from the QB for each lineman.\n",
    "\n",
    "```{r distFromQB func}\n",
    "distFromQB <- function(play){\n",
    "  xdis <- as.numeric(play[9]) - as.numeric(play[24])\n",
    "  ydis <- as.numeric(play[10]) - as.numeric(play[25])\n",
    "  disFromQB <- sqrt(xdis^2 + ydis^2)\n",
    "  play[\"distFromQB\"] <- disFromQB\n",
    "}\n",
    "```\n",
    "\n",
    "I now apply this function to my data frame to get a vector of distances, which I then bind as a new column:\n",
    "\n",
    "```{r distFromQB apply}\n",
    "qb_dist_test <- apply(test_join, MARGIN = 1, FUN = distFromQB)\n",
    "new_test <- cbind(test_join, qb_dist_test)\n",
    "head(kable(new_test))\n",
    "```\n",
    "\n",
    "This test sequence works in providing distance from the QB, but due to the sample size as one play, I don't get any expected values since all my expected values are the actual ones I find.\n",
    "\n",
    "## Test With Week 1\n",
    "\n",
    "Now, let's up our test to the entirety of Week 1. I'll repeat a few steps from the one-play test, but use group_by() as well to get specific plays:\n",
    "to \n",
    "```{r week1 start}\n",
    "week1Grouped <- week1 %>%\n",
    "  group_by(gameId, playId) %>%\n",
    "  filter(nflId %in% oplayers$nflId)\n",
    "\n",
    "qbweek1 <- week1Grouped %>%\n",
    "  filter(nflId %in% qbs$nflId)\n",
    "\n",
    "OLweek1 <- week1Grouped %>%\n",
    "  filter(nflId %in% oline$nflId)\n",
    "```\n",
    "\n",
    "And here's where we start to make changes:  \n",
    "\n",
    "I ungroup so that I can change the nflId to a numeric value, and then join with the players data frame so I get the player to have their name and position attached to each row from the week1 data frame. I then do a select so that those are the only new things I'm bringing over, and then join again with the plays data frame to get offensive formation attached as well.\n",
    "\n",
    "```{r week1 join1}\n",
    "OLweek1UnGrouped <- OLweek1 %>%\n",
    "  ungroup()\n",
    "\n",
    "OLweek1UnGrouped$nflId <- as.numeric(OLweek1UnGrouped$nflId)\n",
    "\n",
    "OLWeek1Join <- left_join(OLweek1UnGrouped, players, by = \"nflId\")\n",
    "OLWeek1Join <- OLWeek1Join %>%\n",
    "  select(names(OLweek1UnGrouped), officialPosition, displayName)\n",
    "\n",
    "test_join <- left_join(OLWeek1Join, plays, by = c(\"gameId\", \"playId\"), suffix = c(\"\", \".plays\"))\n",
    "OLWeek1Join_playerInfo_and_plays <- test_join %>%\n",
    "  select(names(OLWeek1Join), offenseFormation)\n",
    "```\n",
    "\n",
    "Next, let's join in the QB info by joining the qbweek1 data frame by gameId, playId, and then frameId. I'll then select only the things I think are important.\n",
    "\n",
    "```{r week1 QB Join}\n",
    "joined <- left_join(OLWeek1Join_playerInfo_and_plays, qbweek1, by = c(\"gameId\", \"playId\", \"frameId\"), suffix = c(\".normal\", \".qb\"))\n",
    "\n",
    "joined <- joined %>%\n",
    "  select(gameId, playId, nflId.normal, frameId, jerseyNumber.normal, officialPosition, displayName, team.normal, x.normal, y.normal, nflId.qb, jerseyNumber.qb, team.qb, x.qb, y.qb, event.qb, offenseFormation)\n",
    "```\n",
    "\n",
    "Finally, now that for each row in the data frame of lineman location I have the corresponding QB location, I can calculate the distance from QB using a mutate statement.\n",
    "\n",
    "```{r week1 distFromQB}\n",
    "joined_with_dist <- joined %>%\n",
    "  mutate(distance_from_QB = sqrt((x.normal - x.qb)^2 + (y.normal - y.qb)^2))\n",
    "\n",
    "head(kable(joined_with_dist))\n",
    "```\n",
    "I now have calculated the distance away from the QB for each player.\n",
    "\n",
    "## Avg Dist at each Frame\n",
    "\n",
    "It's time to calculate what the average distance away at each frameId should be. This will change based on position and offensive formation though, so I want to make sure I account for that. I do so by using a group_by() statement where I group by first frameId, then position and formation. This splits the data into groups of each combination of those three variables. I then taje the mean of each group to be my average distance and my expected value.\n",
    "\n",
    "```{r avgDist at each frame}\n",
    "data_with_avg_dist <- joined_with_dist %>%\n",
    "  ungroup() %>%\n",
    "  group_by(frameId, officialPosition, offenseFormation) %>%\n",
    "  mutate(avgDist = mean(distance_from_QB))\n",
    "```\n",
    "\n",
    "Sweet. Let's double check that worked:\n",
    "\n",
    "```{r avgDist test}\n",
    "test <- data_with_avg_dist %>%\n",
    "  filter(frameId == 6)\n",
    "\n",
    "head(kable(test))\n",
    "```\n",
    "Whoop!  \n",
    "\n",
    "## Difference of Dist\n",
    "\n",
    "Now, time to find the difference. I'll call this YLAE for Yards Lost Above Expected, with it being average distance - actual distance. That is to say if a player has a positive YLAE, he gave up more than expected/lost his battle and vice-versa.\n",
    "\n",
    "```{r difference}\n",
    "data_with_avg_dist_and_diff <- data_with_avg_dist %>%\n",
    "  mutate(YLAE = avgDist - distance_from_QB)\n",
    "\n",
    "test <- data_with_avg_dist_and_diff %>%\n",
    "  filter(playId == 1419)\n",
    "\n",
    "head(test)\n",
    "```\n",
    "\n",
    "Looks like it worked!\n",
    "\n",
    "## Summary Stuff\n",
    "\n",
    "I'll make a summary table to see the leaders for the week:\n",
    "\n",
    "```{r summary}\n",
    "kable(data_with_avg_dist_and_diff %>%\n",
    "  ungroup()%>%\n",
    "  group_by(displayName) %>%\n",
    "  summarise(AYLAE = mean(YLAE)) %>%\n",
    "  filter(!is.na(AYLAE)) %>%\n",
    "  arrange(AYLAE))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "```\n",
    "\n",
    "It looks like Erik McCoy, Duane Brown, and Rodney Hudson were the best OL of the week. This makes sense to me, as Erik McCoy was named to the All-Rookie Team, Duane Brown is a multi-time Pro-Bowler and All-Pro, and Rodney Hudson is also a multi-time Pro-Bowler. It appears as though my AYLAE metric seems to be having some success in demonstrating great lineman performance! Garrett Bradbury, Calvin Throckmorton, and J.C. Hassennauer are my lowest rated linemen, which also makes sense as these three appeared to be rotational linemen at this point.\n",
    "\n",
    "## Function to do for any week\n",
    "\n",
    "Okay, now time to generalize this for any week. I'll pretty much repeat the same code from above, wrapped in a function, with a few minor tweaks.\n",
    "\n",
    "```{r AYLAE Func, warning=FALSE}\n",
    "getMutData <- function(week){\n",
    "  \n",
    "  weekGrouped <- week %>%\n",
    "    group_by(gameId, playId) %>%\n",
    "    filter(nflId %in% oplayers$nflId)\n",
    "  \n",
    "  qbweek <- weekGrouped %>%\n",
    "    filter(nflId %in% qbs$nflId)\n",
    "  \n",
    "  OLweekUnGrouped <- weekGrouped %>%\n",
    "    ungroup()\n",
    "  \n",
    "  OLweekUnGrouped$nflId <- as.numeric(OLweekUnGrouped$nflId)\n",
    "  \n",
    "  OLWeekJoin <- left_join(OLweekUnGrouped, players, by = \"nflId\")\n",
    "  \n",
    "  OLWeekJoin <- OLWeekJoin %>%\n",
    "    select(names(OLweekUnGrouped), officialPosition, displayName)\n",
    "  \n",
    "  test_join <- left_join(OLWeekJoin, plays, by = c(\"gameId\", \"playId\"), suffix = c(\"\", \".plays\"))\n",
    "  \n",
    "  OLWeekJoin_playerInfo_and_plays <- test_join %>%\n",
    "    select(names(OLWeekJoin), offenseFormation)\n",
    "  \n",
    "  joined <- left_join(OLWeekJoin_playerInfo_and_plays, qbweek, by = c(\"gameId\", \"playId\", \"frameId\"), suffix = c(\".normal\", \".qb\"))\n",
    "  \n",
    "  joined <- joined %>%\n",
    "    select(gameId, playId, nflId.normal, frameId, jerseyNumber.normal, officialPosition, displayName, team.normal, x.normal, y.normal, nflId.qb, jerseyNumber.qb, team.qb, x.qb, y.qb, event.qb, offenseFormation)\n",
    "  \n",
    "  joined_with_dist <- joined %>%\n",
    "    mutate(distance_from_QB = sqrt((x.normal - x.qb)^2 + (y.normal - y.qb)^2))\n",
    "  \n",
    "  data_with_avg_dist <- joined_with_dist %>%\n",
    "    ungroup() %>%\n",
    "    group_by(frameId, officialPosition, offenseFormation) %>%\n",
    "    mutate(avgDist = mean(distance_from_QB))\n",
    "  \n",
    "  ## Minor Tweak 1: I add in the pff data to now include whether or not the blocker was beat by their assignment. I need to make an edit so I can join them though, which is what I do here:\n",
    "  \n",
    "  colnames(pff)[which(names(pff) == \"nflId\")] <- \"nflId.normal\"\n",
    "  \n",
    "  data_with_avg_dist <- left_join(data_with_avg_dist, pff, by = c(\"gameId\", \"playId\", \"nflId.normal\"))\n",
    "  \n",
    "  data_with_avg_dist <- data_with_avg_dist %>%\n",
    "    mutate(distance_from_QB = if_else(pff_beatenByDefender == 1, 0, distance_from_QB))\n",
    "  \n",
    "  data_with_avg_dist_and_diff <- data_with_avg_dist %>%\n",
    "    mutate(YLAE = avgDist - distance_from_QB)\n",
    "\n",
    "  \n",
    "  data_with_avg_dist_and_diff <- data_with_avg_dist_and_diff %>%\n",
    "    mutate(isQB = nflId.normal %in% qbs$nflId)\n",
    "  \n",
    "  return(data_with_avg_dist_and_diff)\n",
    "}\n",
    "```\n",
    "\n",
    "This above function returns my data frame I created so that I can make a summary table with the specifications I want if there are certain things I want to change. However, I'll have the same table for the most part, so I make this function to do that for me:\n",
    "\n",
    "```{r getAYLAE func}\n",
    "getAYLAE <- function(week){\n",
    "  data_with_avg_dist_and_diff <- getMutData(week)\n",
    "  data_with_avg_dist_and_diff %>%\n",
    "    ungroup() %>%\n",
    "    group_by(displayName) %>%\n",
    "    filter(isQB == FALSE && officialPosition != 'QB') %>%\n",
    "    summarise(Position = unique(officialPosition), Team = unique(team.normal), AYLAE = mean(YLAE, na.rm = TRUE), Plays = n_distinct(playId)) %>%\n",
    "    arrange(AYLAE)\n",
    "}\n",
    "```\n",
    "\n",
    "Now, let's apply that to all the weeks and the allweeks data frames:\n",
    "\n",
    "```{r getAYLAE apply, warning=FALSE}\n",
    "kable(getAYLAE(week1))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "kable(getAYLAE(week2))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "kable(getAYLAE(week3))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "kable(getAYLAE(week4))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "kable(getAYLAE(week5))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "kable(getAYLAE(week6))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "kable(getAYLAE(week7))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "kable(getAYLAE(week8))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "kable(getAYLAE(allweeks))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "```\n",
    "\n",
    "I also wanted to make a specific one for players with over 150 snaps so that I don't get things super bogged down by linemen who played just a few snaps and can get a sense of how main starters or rotational players have fared:\n",
    "\n",
    "```{r snapLim AYLAE, warning=FALSE}\n",
    "data_with_avg_dist_and_diff <- getMutData(allweeks)\n",
    "\n",
    "kable(data_with_avg_dist_and_diff %>%\n",
    "    ungroup() %>%\n",
    "    group_by(displayName) %>%\n",
    "    filter(isQB == FALSE && officialPosition != 'QB') %>%\n",
    "    summarise(Position = unique(officialPosition), Team = unique(team.normal), AYLAE = mean(YLAE, na.rm = TRUE), Plays = n_distinct(playId)) %>%\n",
    "    filter(Plays > 150) %>%\n",
    "    arrange(AYLAE))%>%\n",
    "  scroll_box(width = \"500px\", height = \"200px\")\n",
    "```\n",
    "Look at that Jags Line! I know Cam Robinson has had a bit of a breakout the past few years and Brandon Linder has been one of the league's premier guards for a while as well. I will say however that I am shocked to see a majority of the Buccaneers O-Line in the bottom here. I think that may be due to Brady's immobile pocket-passing, as where younger, more mobile QBs will move more to create more space, Brady is willing to stand in to deliver a pass. This can't change though, as if I group_by QB as well, now I'll have the linemen compared to their teammates, which is a completely different (yet also useful!) stat that can evaluate relative performance across a team. \n",
    "\n",
    "## GGAnimate Time!\n",
    "\n",
    "This is all a pretty abstract idea, so I'll try to visualize an example play using gganimate. I'll also create a custom theme for my gif. For my first example, let's look at the first play I tested for Tampa Bay, which also may help put my theory to the test about Brady's immobility:\n",
    "\n",
    "```{r GGAnimate}\n",
    "example_play <- getMutData(week1) %>%\n",
    "  filter(playId == 97)\n",
    "\n",
    "field_theme <- function(){\n",
    "  font <- \"Georgia\"\n",
    "  theme_bw() %+replace%\n",
    "    theme(\n",
    "      panel.grid.major.x = element_line(colour = \"white\", linetype = \"dashed\", size = 2), \n",
    "      panel.grid.minor.x = element_line(colour = \"white\"),\n",
    "      panel.grid.major.y = element_line(size = 3),\n",
    "      panel.background = element_rect(fill = \"darkgreen\"),\n",
    "      panel.border = element_rect(color = \"darkgreen\", fill = NA),\n",
    "      axis.line = element_line(color = \"white\"),\n",
    "      axis.ticks = element_line(color = \"white\"),\n",
    "      axis.text = element_text(color = \"black\"),\n",
    "      plot.background = element_rect(fill = \"gray\")\n",
    "    )\n",
    "}\n",
    "\n",
    "play_anim1 <- ggplot(example_play, aes(y = x.normal, x = y.normal, shape = isQB, colour = YLAE)) + geom_point(size = 10) + field_theme() + scale_y_continuous(minor_breaks = seq(0, 100, 5), breaks = seq(0, 100, 5)) + scale_x_continuous(breaks = c(0, 23.583, 29.717, 53.3)) +\n",
    "  transition_time(frameId) + xlab(\"Yard Line\") + ylab(\"Field X-Location\") + ggtitle(\"Tampa Bay Play\") + scale_colour_gradientn(colours = terrain.colors(12))\n",
    "\n",
    "play_anim1\n",
    "```\n",
    "\n",
    "It looks like Brady isn't moving or giving his linemen any help here, which makes sense why they would have more negative AYLAE.  Let's check another example with a different QB:\n",
    "\n",
    "```{r GGAnimate2}\n",
    "example_play2 <- getMutData(week1) %>%\n",
    "  filter(gameId == 2021091207, playId == 253)\n",
    "\n",
    "play_anim2 <- ggplot(example_play2, aes(y = x.normal, x = y.normal, shape = isQB, colour = YLAE)) + geom_point(size = 10) + field_theme() + scale_y_continuous(minor_breaks = seq(0, 100, 5), breaks = seq(0, 100, 5)) + scale_x_continuous(breaks = c(0, 23.583, 29.717, 53.3)) +\n",
    "  transition_time(frameId) + xlab(\"Yard Line\") + ylab(\"Field X-Location\") + ggtitle(\"Arizona Play\") + scale_colour_gradientn(colours = terrain.colors(12))\n",
    "\n",
    "play_anim2\n",
    "```\n",
    "\n",
    "It's subtle, but Kyler drifts away from his line, improving their YLAE and helping out there AYLAE.\n",
    "\n",
    "## Conclusions\n",
    "\n",
    "Before recently, there was no stat or way to measure lineman performance in the NFL. Sure, we could look at sacks allowed, but that doesn't tell the full story; can we only measure the bad? Is there a way to measure good blocking?  \n",
    "\n",
    "YLAE provides a meaningful stat to compare lineman performance on pass plays. Now, we can look and evaluate which linemen are providing meaningful protection away from their QB. We can see who's firmly holding their ground and who's giving it up. I believe that YLAE is a great way to evaluate linemen on pass plays and to be able to make meaningful comparisons across them without only highlighting the bad. I think it has some errors, like how it biases mobile QBs that create space from the pocket with their legs, but overall, I believe it has the potential to become one of the best modern statistics for linemen.\n",
    "\n",
    "Thank you for reading my submission!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.0.5"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.009408,
   "end_time": "2023-01-07T11:53:52.583051",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-01-07T11:53:48.573643",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
